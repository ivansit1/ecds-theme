<?component name="loadingbutton" macroURI="loadingbutton.zul" class="com.zkresearch.common.LoadingButton" ?>


<loadingbutton label='SAP' iconSclass='fas fa-search fa-1x'></loadingbutton>

<script type="text/javascript">
	function loadingIcon(o) {
	   $(o).find( "i" ).addClass('fa-spin').addClass('fa-sync');
	}
	
	function removeIcon(o) {   
	   $('$'+o).find( "i" ).removeClass('fa-spin').removeClass('fa-sync');
	}
</script>

////////////////


<button  id="loadingButton" label="${empty arg.label ? '' : arg.label}"
 xmlns:w="http://www.zkoss.org/2005/zk/client" w:onClick='loadingIcon(this)'  
  iconSclass="${empty arg.iconSclass ? '' : arg.iconSclass}">
	 <attribute name="onClick">    
		  Clients.evalJavaScript("removeIcon('loadingButton')");
      </attribute>
</button>  


////////////////
package com.zkresearch.common;

import java.util.concurrent.TimeUnit;

import org.zkoss.zk.ui.Components; 
import org.zkoss.zk.ui.HtmlMacroComponent; 
import org.zkoss.zk.ui.select.annotation.Listen;
import org.zkoss.zk.ui.select.annotation.Wire;
import org.zkoss.zul.Button;  

public class LoadingButton extends HtmlMacroComponent {
    private static final long serialVersionUID = 1L;
    @Wire("#loadingButton")
    private Button loadingButton; 
    
	@Listen("onClick = #loadingButton")
	public void edit() throws InterruptedException {   
		if(Components.getComposer(loadingButton.getRoot()) != null) {
			if(Components.getComposer(loadingButton.getRoot()) instanceof LoadingButtonSearch) {
				LoadingButtonSearch a = (LoadingButtonSearch)Components.getComposer(loadingButton.getRoot());
				a.loadingButtonSearch();
			}
		} 
	}
   
}


//////////////////////////
package com.zkresearch.common;

public interface LoadingButtonSearch {
	public void loadingButtonSearch();
}
